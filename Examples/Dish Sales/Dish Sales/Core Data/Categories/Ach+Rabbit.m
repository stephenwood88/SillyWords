//
//  Ach+Rabbit.m
//  Dish Sales
//
//  Created by Jeff Lockhart on 4/24/13.
//  Copyright (c) 2013 AppVantage LLC. All rights reserved.
//

#import "Ach+Rabbit.h"
#import "Agreement+Rabbit.h"
#import "TextOverlayViewFront.h"
#import "AVTextUtilities.h"
#import "EncryptedStringTransformer.h"
#import "AVTextUtilities.h"

// Generated by @dynamic - https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/CoreData/Articles/cdAccessorMethods.html
@interface Ach (PrimitiveAccessor)

- (NSString *)primitiveAccountNumber;
- (NSData *)primitiveAccountNumberEncrypted;

- (void)setPrimitiveFinancialInstitution:(NSString *)financialInstitution;
- (void)setPrimitiveAccountType:(NSString *)accountType;
- (void)setPrimitiveRoutingNumber:(NSString *)routingNumber;
- (void)setPrimitiveAccountNumberEncrypted:(NSData *)accountNumberEncrypted;
- (void)setPrimitiveAccountNumber:(NSString *)accountNumber;

@end

@implementation Ach (Rabbit)

- (BOOL)isStarted {
    
    return self.financialInstitution.length || self.routingNumber.length || self.accountNumber.length;
}

// These algorithms should mirror the CustomerInfoViewController verifyInfo algorithm. They should both return the same result.
- (BOOL)isCompleted {
    
    return self.financialInstitution.length && [AVTextUtilities isValidRoutingNumber:self.routingNumber] && [AVTextUtilities isValidAchAccountNumber:self.accountNumber];
}

- (void)setFinancialInstitution:(NSString *)financialInstitution {
    
    [self willChangeValueForKey:@"financialInstitution"];
    [self setPrimitiveFinancialInstitution:financialInstitution];
    [self didChangeValueForKey:@"financialInstitution"];
    if (self.agreement.textOverlayFront) {
        self.agreement.textOverlayFront.financialInstitution.text = financialInstitution;
    }
    
    self.agreement.dateModified = [NSDate date];
}

- (void)setAccountType:(NSString *)accountType {
    
    [self willChangeValueForKey:@"accountType"];
    [self setPrimitiveAccountType:accountType];
    [self didChangeValueForKey:@"accountType"];
    if (self.agreement.textOverlayFront) {
        self.agreement.textOverlayFront.accountType.text = accountType;
    }
    
    self.agreement.dateModified = [NSDate date];
}

- (void)setRoutingNumber:(NSString *)routingNumber {
    
    [self willChangeValueForKey:@"routingNumber"];
    [self setPrimitiveRoutingNumber:routingNumber];
    [self didChangeValueForKey:@"routingNumber"];
    if (self.agreement.textOverlayFront) {
        self.agreement.textOverlayFront.routingNumber.text = routingNumber;
    }
    
    self.agreement.dateModified = [NSDate date];
}

- (void)setAccountNumber:(NSString *)accountNumber {
    
    [self willChangeValueForKey:@"accountNumber"];
    [self setPrimitiveAccountNumber:accountNumber];
    [self didChangeValueForKey:@"accountNumber"];
    if (accountNumber) {
        EncryptedStringTransformer *transformer = (EncryptedStringTransformer *) [NSValueTransformer valueTransformerForName:@"EncryptedStringTransformer"];
        if (!self.salt) {
            self.salt = [AVTextUtilities randomStringOfLength:32];
        }
        transformer.salt = self.salt;
        [self setPrimitiveAccountNumberEncrypted:[transformer transformedValue:accountNumber]];
    }
    else {
        [self setPrimitiveAccountNumberEncrypted:nil];
    }
    if (self.agreement.textOverlayFront) {
        self.agreement.textOverlayFront.accountNumber.text = [AVTextUtilities obfuscatedNumber:accountNumber showNumDigits:4];
    }
    
    self.agreement.dateModified = [NSDate date];
}

- (NSString *)accountNumber {
    
    [self willAccessValueForKey:@"accountNumber"];
    NSString *accountNumber = [self primitiveAccountNumber];
    [self didAccessValueForKey:@"accountNumber"];
    if (!accountNumber && self.salt) { // If salt not set, the account number was never saved
        NSData *accountNumberEncrypted = [self primitiveAccountNumberEncrypted];
        if (accountNumberEncrypted) {
            EncryptedStringTransformer *transformer = (EncryptedStringTransformer *) [NSValueTransformer valueTransformerForName:@"EncryptedStringTransformer"];
            transformer.salt = self.salt;
            accountNumber = [transformer reverseTransformedValue:accountNumberEncrypted];
            [self setPrimitiveAccountNumber:accountNumber];
        }
    }
    return accountNumber;
}

@end
